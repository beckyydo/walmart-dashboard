var svgWidth = 960;
var svgHeight = 500;

var margin = {
  top: 20,
  right: 40,
  bottom: 60,
  left: 100
};

var width = svgWidth - margin.left - margin.right;
var height = svgHeight - margin.top - margin.bottom;

// Create an SVG wrapper, append an SVG group that will hold our chart, and shift the latter by left and top margins.
var svg = d3.select(".chart")
  .append("svg")
  .attr("width", svgWidth)
  .attr("height", svgHeight);

var chartGroup = svg.append("g")
  .attr("transform", `translate(${margin.left}, ${margin.top})`);

// function xScale(data, chosenXAxis) {
//   var xLinearScale = d3.scaleLinear()
//       .domain([d3.min(data, d => d.Fuel_Price) * 0.8,
//           d3.max(data, d => d.Fuel_Price) * 1.2
//       ])
//       .range([0, width]);
//   return xLinearScale;
// }
// function yScale(data, chosenYAxis) {
//   var yLinearScale = d3.scaleLinear()
//       .domain([d3.min(data, d => d.Weekly_Sales) * 0.8,
//           d3.max(data, d => d.Weekly_Sales) * 1.2
//       ])
//       .range([height, 0]);
//   return yLinearScale;
//   }

// Import Data
d3.csv("walmart.csv").then(function(data) {
  console.log(data)

    // Step 1: Parse Data/Cast as numbers
    // ==============================
  data.forEach(function(sample) {
       sample.Fuel_Price = +sample.Fuel_Price;
       sample.Temperature = +sample.Temperature;
       sample.Unemployment = +sample.Unemployment;
       sample.Weekly_Sales = +sample.Weekly_Sales;
       sample.CPI = +sample.CPI
  })
  console.log(data)
  var xLinearScale = d3.scaleLinear()
    .domain([d3.min(data, d => d.Fuel_Price), d3.max(data, d => d.Fuel_Price)])
    .range([0, width]);
  var yLinearScale = d3.scaleLinear()
    .domain([d3.min(data, d => d.Weekly_Sales), d3.max(data, d => d.Weekly_Sales)])
    .range([height, 0]);

  // var xLinearScale = xScale(data, data.Fuel_Price);
  // var yLinearScale = yScale(data, data.Weekly_Sales);
  var bottomAxis = d3.axisBottom(xLinearScale);
  var leftAxis = d3.axisLeft(yLinearScale);

  chartGroup.append("g")
    .attr("transform", `translate(0, ${height})`)
    .call(bottomAxis);
  chartGroup.append("g")
    .call(leftAxis);
  var circlesGroup = chartGroup.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
    .attr("cx", d => xLinearScale(d.Fuel_Price))
    .attr("cy", d => yLinearScale(d.Weekly_Sales))
    .attr("r", "15")
    .attr("fill", "pink")
    .attr("opacity", ".5");

}).catch(function(error) {
  console.log(error);
});

  // var sortFuel = data.sort((a, b) => a.Fuel_Price - b.Fuel_Price)
  // console.log(sortFuel)
  // var trace1 = {
  //   x: sortFuel.Fuel_Price,
  //   y: sortFuel.Weekly_Sales,
  //   mode: 'markers'
  // };
  // var data = [trace1];
  // var layout = {
  //   title: "Line"
  // };
  // Plotly.newPlot('chart', data, layout)

//   var yLinearScale = d3.scaleLinear()
//     .range([chartHeight, 0])
//     .domain([d3.min(data, d => d.Weekly_Sales), d3.max(data, d => d.Weekly_Sales)]);
//   var fuelLinearScale = d3.scaleLinear()
//     .range([0, chartWidth])
//     .domain([d3.min(data, d => d.Fuel_Price), d3.max(data, d => d.Fuel_Price)]);
//   var CPILinearScale = d3.scaleLinear()
//     .range([chartHeight, 0])
//     .domain([0, d3.max(data, d => d.CPI)]); 
//   var bottomAxis = d3.axisBottom(fuelLinearScale);
//   var leftAxis = d3.axisLeft(yLinearScale);
//   var drawLine = d3
//     .line()
//     .x(d => fuelLinearScale(d.Fuel_Price))
//     .y(d => yLinearScale(d.Weekly_Sales));
//   chartGroup.append("path")
//     .attr("d", drawLine(data))
//     .classed("line", true)
//   chartGroup.append("g")
//     .classed("axis", true)
//     .call(leftAxis);
//   chartGroup.append("g")
//     .classed("axis", true)
//     .attr("transform", "translate(0, " + chartHeight + ")")
//     .call(bottomAxis);
//   }).catch(function(error) {
//     console.log(error);
// });



  //     data.num_hits = +data.num_hits;
  //   });

  //   // Step 2: Create scale functions
  //   // ==============================
  //   var xLinearScale = d3.scaleLinear()
  //     .domain([20, d3.max(hairData, d => d.hair_length)])
  //     .range([0, width]);

  //   var yLinearScale = d3.scaleLinear()
  //     .domain([0, d3.max(hairData, d => d.num_hits)])
  //     .range([height, 0]);

  //   // Step 3: Create axis functions
  //   // ==============================
  //   var bottomAxis = d3.axisBottom(xLinearScale);
  //   var leftAxis = d3.axisLeft(yLinearScale);

  //   // Step 4: Append Axes to the chart
  //   // ==============================
  //   chartGroup.append("g")
  //     .attr("transform", `translate(0, ${height})`)
  //     .call(bottomAxis);

  //   chartGroup.append("g")
  //     .call(leftAxis);

  //   // Step 5: Create Circles
  //   // ==============================
  //   var circlesGroup = chartGroup.selectAll("circle")
  //   .data(hairData)
  //   .enter()
  //   .append("circle")
  //   .attr("cx", d => xLinearScale(d.hair_length))
  //   .attr("cy", d => yLinearScale(d.num_hits))
  //   .attr("r", "15")
  //   .attr("fill", "pink")
  //   .attr("opacity", ".5");

  //   // Step 6: Initialize tool tip
  //   // ==============================
  //   var toolTip = d3.tip()
  //     .attr("class", "tooltip")
  //     .offset([80, -60])
  //     .html(function(d) {
  //       return (`${d.rockband}<br>Hair length: ${d.hair_length}<br>Hits: ${d.num_hits}`);
  //     });

  //   // Step 7: Create tooltip in the chart
  //   // ==============================
  //   chartGroup.call(toolTip);

  //   // Step 8: Create event listeners to display and hide the tooltip
  //   // ==============================
  //   circlesGroup.on("click", function(data) {
  //     toolTip.show(data, this);
  //   })
  //     // onmouseout event
  //     .on("mouseout", function(data, index) {
  //       toolTip.hide(data);
  //     });

  //   // Create axes labels
  //   chartGroup.append("text")
  //     .attr("transform", "rotate(-90)")
  //     .attr("y", 0 - margin.left + 40)
  //     .attr("x", 0 - (height / 2))
  //     .attr("dy", "1em")
  //     .attr("class", "axisText")
  //     .text("Number of Billboard 100 Hits");

  //   chartGroup.append("text")
  //     .attr("transform", `translate(${width / 2}, ${height + margin.top + 30})`)
  //     .attr("class", "axisText")
  //     .text("Hair Metal Band Hair Length (inches)");
  // }).catch(function(error) {
  //   console.log(error);
  
